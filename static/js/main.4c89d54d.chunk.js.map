{"version":3,"sources":["static-data.js","App.js","serviceWorker.js","index.js"],"names":["txtgen","require","getQuotes","numberOfQuotes","Array","from","length","author","faker","name","findName","quote","sentence","generateQuotes","quotes","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","newQuote","bind","assertThisInitialized","rand","Math","floor","random","setState","react_default","a","createElement","id","App_Text","App_Buttons","clickHandler","Component","Text","Fragment","index_es","icon","faQuoteLeft","style","fontSize","marginRight","Buttons","url","encodeURIComponent","replace","className","href","title","rel","target","faTwitter","onClick","faHandPointer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kPACMA,EAASC,EAAQ,MAGVC,EAAY,SAAAC,GAGrB,OAYJ,SAAwBA,GACpB,OAAOC,MAAMC,KAAK,CAAEC,OAAQH,GAAiB,iBARvC,CACFI,OAAQC,IAAMC,KAAKC,WACnBC,MAAOX,EAAOY,cARNC,CAAeV,ICG/B,IAAIW,EAAS,GACPC,cAEJ,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,KACbP,EAAKQ,SAAWR,EAAKQ,SAASC,KAAdR,OAAAS,EAAA,EAAAT,CAAAD,IAHFA,0EAOf,IAAIW,EAAOC,KAAKC,MAAsB,GAAhBD,KAAKE,UAC3BX,KAAKY,SAAS,CACZrB,MAAOG,EAAOc,GAAMjB,MACpBJ,OAAQO,EAAOc,GAAMrB,qDAMtBO,EAASZ,EAAU,IACnB,IAAI0B,EAAOC,KAAKC,MAAsB,GAAhBD,KAAKE,UAC3BX,KAAKY,SAAS,CAACrB,MAAOG,EAAOc,GAAMjB,MAAOJ,OAAQO,EAAOc,GAAMrB,0CAIjE,OACE0B,EAAAC,EAAAC,cAAA,OAAKC,GAAK,aAEJhB,KAAKI,MAGPS,EAAAC,EAAAC,cAAA,OAAKC,GAAK,aACRH,EAAAC,EAAAC,cAACE,EAAD,CAAM1B,MAASS,KAAKI,MAAMb,MAAOJ,OAAUa,KAAKI,MAAMjB,SACtD0B,EAAAC,EAAAC,cAACG,EAAD,CAASC,aAAgBnB,KAAKK,SAAUd,MAASS,KAAKI,MAAMb,MAAOJ,OAASa,KAAKI,MAAMjB,UAJzF0B,EAAAC,EAAAC,cAAA,OAAKC,GAAI,SAAT,uBA5BQI,aA0CZC,EAAO,SAACzB,GAAQ,IACbL,EAAiBK,EAAjBL,MAAOJ,EAAUS,EAAVT,OACd,OACI0B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAQ,SAAA,KACIT,EAAAC,EAAAC,cAAA,OAAKC,GAAK,SACRH,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAiBC,KAAQC,IAAaC,MAAQ,CAACC,SAAU,QAASC,YAAa,WAC9ErC,GAELsB,EAAAC,EAAAC,cAAA,QAAMC,GAAK,UAAX,KAAuB7B,KAKzB0C,EAAS,SAACjC,GAAQ,IAChBL,EAAiBK,EAAjBL,MAAOJ,EAAUS,EAAVT,OACT2C,EAAM,6CAA6CvC,EAAMwC,mBAAmB,KAAK5C,EAAO6C,QAAQ,OAAQ,IAC5G,OAEEnB,EAAAC,EAAAC,cAAA,OAAKkB,UAAY,WAEXpB,EAAAC,EAAAC,cAAA,KAAGmB,KAAOJ,EAAKK,MAAM,oBAAoBC,IAAK,sBAAsBC,OAAO,SAASJ,UAAW,sCAAsCjB,GAAI,cAAaH,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAiBC,KAAOc,MAA9K,KACDzB,EAAAC,EAAAC,cAAA,UAAQC,GAAK,YAAYuB,QAAW3C,EAAMuB,aAAcc,UAAY,kBAApE,IAAsFpB,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAiBC,KAAOgB,SAKxG7C,IClEK8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4c89d54d.chunk.js","sourcesContent":["import faker  from 'faker';\r\nconst txtgen = require('txtgen');\r\n\r\n\r\nexport const getQuotes = numberOfQuotes=> {\r\n\r\n   let quotes = generateQuotes(numberOfQuotes);\r\n    return quotes;\r\n};\r\n\r\n\r\nfunction generateQuote(){\r\n    return{\r\n        author: faker.name.findName(),\r\n        quote: txtgen.sentence()\r\n    }\r\n}\r\n\r\n\r\nfunction generateQuotes(numberOfQuotes) {\r\n    return Array.from({ length: numberOfQuotes}, () => generateQuote());\r\n}\r\n\r\n","import React, {Component} from 'react';\nimport \"./App.css\"; \nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faQuoteLeft, faHandPointer} from '@fortawesome/free-solid-svg-icons';\nimport {faTwitter} from  '@fortawesome/free-brands-svg-icons';\nimport {getQuotes} from './static-data';\n\n\n\nlet quotes = [];\nclass App extends Component {\n  \n  constructor(props){\n      super(props);\n      this.state = null;\n      this.newQuote = this.newQuote.bind(this);\n  }\n\n  newQuote(){\n     let rand = Math.floor(Math.random() * 10);\n     this.setState({\n       quote: quotes[rand].quote,\n       author: quotes[rand].author\n     });\n  }\n\n\n  componentDidMount(){\n      quotes = getQuotes(10);\n      let rand = Math.floor(Math.random() * 10);\n      this.setState({quote: quotes[rand].quote, author: quotes[rand].author })\n  }\n\n  render(){\n    return(\n      <div id = \"quote-box\">\n        {\n          (!this.state)? \n          <div id =\"quote\">Please Wait</div>\n          : \n          <div id = \"quote-box\">\n            <Text quote = {this.state.quote} author = {this.state.author}/>\n            <Buttons clickHandler = {this.newQuote} quote = {this.state.quote} author= {this.state.author}/>\n          </div>\n        }\n      </div>\n      \n    );\n  }\n  \n}\n\nconst Text = (props)=>{\n  const {quote, author} = props;\n  return (\n      <>\n          <div id = \"quote\">\n            <FontAwesomeIcon icon = {faQuoteLeft} style ={{fontSize: \"1.0em\", marginRight: \"0.4em\" }} />\n            {quote}\n        </div>\n        <span id = \"author\"> -{author}</span>\n      </>\n  );\n}\n\nconst Buttons =(props)=>{\n const {quote, author} = props;\n  let url = \"https://www.twitter.com/intent/tweet?text=\"+quote+encodeURIComponent('#')+author.replace(/\\s+/g, '');\n  return (\n    \n    <div className = \"buttons\">\n          \n          <a href ={url} title=\"Tweet this quote!\" rel =\"noopener noreferrer\" target=\"_blank\" className= \"btn btn-danger twitter-share-button\" id =\"tweet-code\"><FontAwesomeIcon icon= {faTwitter} /> </a>\n         <button id = \"new-quote\" onClick = {props.clickHandler} className = \"btn btn-danger\"> <FontAwesomeIcon icon ={faHandPointer} /></button> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}